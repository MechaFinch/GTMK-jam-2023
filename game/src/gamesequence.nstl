
--
-- gamesequence
-- sequences the game
--

library _util;
library _text from "simvideo/text";
library _dialog;
library _etch;
library _pit from "periodic";
library _game;
library _sprites from "simvideo/sprites";
library _music;

-- library function signatures
-- draws a sprite without transparency
external function _sprites.draw of u8 pointer sp, i16 x, i16 y returns none;
-- draws a sprite with transparency
external function _sprites.draw_transparent of u8 pointer sp, i16 x, i16 y returns none;
-- draws a part of a sprite without transparency
external function _sprites.draw_part of u8 pointer sp, i16 x, i16 y, i16 sx, i16 sy, i16 w, i16 h returns none;
-- draws a part of a sprite with transparency
external function _sprites.draw_part_transparent of u8 pointer sp, i16 x, i16 y, i16 sx, i16 sy, i16 w, i16 h returns none;
-- gets the width of a sprite
external function _sprites.get_width of u8 pointer sp returns u16;
-- gets the height of a sprite
external function _sprites.get_height of u8 pointer sp returns u16;

-- sets a single color
external function _gutil.set_color of u8 idx, u32 rgb returns none;

-- halts, then returns (wait for input/timer)
external function _util.halt of none returns none;

-- runs a function later
external function _pit.runlater of ptr func, u16 time returns none;
-- enable/disable conveyor cause it will draw over anything static
external function _pit.enable_conveyor_anim of none;
external function _pit.disable_conveyor_anim of none;
external function _pit.set_song of ptr mp;

-- waits on a dialog selection
-- num_choices = number of available choices
-- c1_h = height in lines of choice 1
-- c2_h = height in lines of choice 2
-- c3_h = height in lines of choice 3
external function _dialog.wait_dialog of u8 num_choices, u8 c1_h, u8 c2_h, u8 c3_h;
-- types out text
external function _dialog.type_text of u8 pointer str, u16 len, u8 fgc, u8 bgc, u8 row, u8 col, u16 rate;
-- blanks the dialog box
external function _dialog.reset_box of none;

-- lets the user etch-a-sketch a drawing
external function _etch.create_image of u16 w, u16 h returns u8 pointer;

-- aligned string, no wrap, no scroll
external function _text.a_string of u8 pointer str, u16 len, u8 fgc, u8 bgc, u8 row, u8 col returns none;

-- resets the screen
external function _game.reset_screen of none;
-- sets the sprite for the person
external function set_person of ptr sprite_pointer;
-- sets the sprite for the robot
external function set_bobot of ptr sprite_pointer;

-- more stuff can be found in the other source files and the copy of the standard library
-- each library of the standard library has 1 or 2 files, one .nstl and optionally one .asm.
-- the .nstl file has copy-paste function and type signatures, and potentially implementation.
-- the .asm files usually have the actual implementation
-- omit a file extension in the 'from' part of a library declaration and it'll choose automatically

-- untyped constants
define COLOR_TRANSPARENT is 0;
define COLOR_BLACK is 1;
define COLOR_WHITE is 2;

define COLOR_CHOICE1 is 26;
define COLOR_CHOICE2 is 27;
define COLOR_CHOICE3 is 28;

define COLOR_HUMAN_TEXT is 32;
define COLOR_ROBOT_TEXT is 33;

-- code!

function sequence of none begin
	call _pit.set_song with to _music.song1;

	-- exmaples!
	-- define strings
	constant str1 is string gets "string 1";
	constant str2 is string gets "string 2\nwith two lines!";
	
	-- draw text quickly
	-- text a_ functions take (row, column) in characters, which are 8x8 pixels
	-- u_ functions would take (x, y) pixel coords but I haven't implemented those
	call _text.a_string with to str1, sizeof str1, COLOR_CHOICE1, COLOR_TRANSPARENT, 22, 2;
	
	-- draw text slowly (animated ai?)
	-- the last argument is in ms between characters
	call _dialog.type_text with to str2, sizeof str2, COLOR_CHOICE2, COLOR_TRANSPARENT, 23, 2, 10;
	
	-- make a choice
	call _dialog.wait_dialog with 2, 1, 2, 0;
	
	constant str3 is string gets "draw!";
	call _dialog.reset_box with none;
	call _text.a_string with to str3, sizeof str3, COLOR_WHITE, COLOR_BLACK, 26, 2;
	
	-- bring up the drawing stuff
	call _pit.disable_conveyor_anim with none;
	
	variable sprite_pointer is ptr gets (call _etch.create_image with 32, 32);
	
	-- bring back the screen n such
	call _pit.set_song with to _music.song2;
	call _game.reset_screen with none; -- clears dialog too
	call _pit.enable_conveyor_anim with none;
	
	-- display the drawing in sprite form
	-- the drawing window shows large pixels, but they become actual pixels in the sprite
	call _sprites.draw with sprite_pointer, (320 / 2) - 16, 16;
	
	constant str4 is string gets "such a good drawing";
	call _dialog.type_text with to str4, sizeof str4, COLOR_WHITE, COLOR_BLACK, 26, 2, 10;
end function
